# Copyright 2024 Dynamic Solutions Sp. z o.o. sp.k.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json

suite: test delivery services output - service

tests:
  # @Test
  - it: when a single output defined a single service with a single port is created
    template: templates/delivery/delivery-service.yaml
    set:
      delivery:
        service1:
          outputs:
            output1:
              service:
                port: 80
                targetPort: http
    asserts:
      - isKind: 
          of: Service
      - hasDocuments:
          count: 1
      - matchRegex:
          path: .metadata.name
          pattern: -delivery-service1$
      - lengthEqual:
          path: spec.ports
          count: 1
      - equal:
          path: spec.ports[0].port
          value: 80
      - equal:
          path: spec.ports[0].targetPort
          value: http
  # @Test    
  - it: when multiple outputs defined a single service with multiple ports is created
    template: templates/delivery/delivery-service.yaml
    set: 
      delivery:
        service1:
          outputs:
            output1:
              service:
                port: 80
                targetPort: http
            output2:
              service:
                port: 443
                targetPort: https
    asserts:
      - isKind: 
          of: Service
      - hasDocuments:
          count: 1
      - matchRegex:
          path: .metadata.name
          pattern: -delivery-service1$
      - lengthEqual:
          path: spec.ports
          count: 2
      - equal:
          path: spec.ports[0].port
          value: 80
      - equal:
          path: spec.ports[0].targetPort
          value: http
      - equal:
          path: spec.ports[1].port
          value: 443
      - equal:
          path: spec.ports[1].targetPort
          value: https
  # @Test
  - it: when a single output defined and ingress host configured a single ingress is created with default path
    template: templates/delivery/delivery-ingress.yaml
    set:
      delivery:
        service1:
          outputs:
            output1:
              service:
                port: 80
                targetPort: http
              ingress:
                host: unit.test.host
    asserts:
      - isKind: 
          of: Ingress
      - hasDocuments:
          count: 1
      - matchRegex:
          path: .metadata.name
          pattern: -delivery-service1-output1$
      - equal:
          path: spec.rules[0].host
          value: unit.test.host
      - equal:
          path: spec.rules[0].http.paths[0].path
          value: /
      - matchRegex:
          path: spec.rules[0].http.paths[0].backend.service.name
          pattern: -delivery-service1$
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.port.number
          value: 80
  # @Test
  - it: when multiple outputs defined with ingress hosts then multiple ingresses are created
    template: templates/delivery/delivery-ingress.yaml
    set:
      delivery:
        service1:
          outputs:
            output1:
              service:
                port: 80
                targetPort: http
              ingress:
                host: unit.test.host1
            output2:
              service:
                port: 443
                targetPort: https
              ingress:
                host: unit.test.host2
    asserts:
      - isKind: 
          of: Ingress
      - hasDocuments:
          count: 2
      - matchRegex:
          path: .metadata.name
          pattern: -delivery-service1-output(1|2)$
      - lengthEqual:
          path: spec.rules
          count: 1
  # @Test
  - it: when multiple outputs defined ingress is created only when host defined
    template: templates/delivery/delivery-ingress.yaml
    set:
      delivery:
        service1:
          outputs:
            output1:
              service:
                port: 80
                targetPort: http
              ingress:
                host: unit.test.host1
            output2:
              service:
                port: 443
                targetPort: https
    asserts:
      - isKind: 
          of: Ingress
      - hasDocuments:
          count: 1
  # @Test
  - it: when ingress tls secret is set then ingress should be created with tls settings
    template: templates/delivery/delivery-ingress.yaml
    set:
      delivery:
        service1:
          outputs:
            output1:
              service:
                port: 80
                targetPort: http
              ingress:
                host: unit.test.host
                tls:
                  secretName: tls-secret-test
    asserts:
      - isKind: 
          of: Ingress
      - hasDocuments:
          count: 1
      - matchRegex:
          path: spec.tls[0].secretName
          pattern: tls-secret-test
      - matchRegex:
          path: spec.tls[0].hosts[0]
          pattern: unit.test.host