# Copyright 2024 Dynamic Solutions Sp. z o.o. sp.k.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Test: Verify StreamX Helm chart multi tenancy deployment'

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

jobs:
  verify-chart-deployment:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.6'
  
      - name: Setup Kind
        run: go install sigs.k8s.io/kind@v0.20.0

      - name: Create K8s cluster with Kind
        run: kind create cluster --config .github/cluster/kind-cluster.yaml

      - uses: azure/setup-helm@v3
        with:
          version: v3.13.2

      - name: Install prerequisites
        run:  .github/scripts/install-prerequisites.sh

      - name: Create namespace and ingestion service token secret for Tenants 1 and 2
        run: |
          kubectl create namespace tenant-1
          kubectl -n tenant-1 apply -f examples/reference/secrets/restIngestionJwtKeys.yaml
          kubectl create namespace tenant-2
          kubectl -n tenant-2 apply -f examples/reference/secrets/restIngestionJwtKeys.yaml

      - name: Configure Docker Registry with StreamX images for Tenants 1 and 2
        env:
          REGISTRY_JSON_KEY: ${{ secrets.GCP_STREAMX_RELEASES_GAR_READ_KEY }}
        run: |
          kubectl -n tenant-1 create secret docker-registry streamx-gar-json-key \
            --docker-server=europe-west1-docker.pkg.dev \
            --docker-username=_json_key_base64 \
            --docker-password="${REGISTRY_JSON_KEY}"
          kubectl -n tenant-2 create secret docker-registry streamx-gar-json-key \
            --docker-server=europe-west1-docker.pkg.dev \
            --docker-username=_json_key_base64 \
            --docker-password="${REGISTRY_JSON_KEY}"

      - name: Initialize Apache Pulsar for Tenants 1 and 2
        run: |
          helm -n tenant-1 install tenant-1 ./chart \
            --set "imagePullSecrets[0].name=streamx-gar-json-key" \
            --set messaging.pulsar.initTenant.enabled=true \
            --set rest_ingestion.enabled=false \
            -f examples/reference/messaging.yaml
          helm -n tenant-2 install tenant-2 ./chart \
            --set "imagePullSecrets[0].name=streamx-gar-json-key" \
            --set messaging.pulsar.initTenant.enabled=true \
            --set rest_ingestion.enabled=false \
            -f examples/reference/messaging.yaml

      - name: Wait for initialization of Apache Pulsar completes for Tenants 1 and 2
        run: |
          kubectl -n tenant-1 wait --for=condition=complete job --selector app.kubernetes.io/component=pulsar-init-tenant --timeout=300s
          kubectl -n tenant-2 wait --for=condition=complete job --selector app.kubernetes.io/component=pulsar-init-tenant --timeout=300s

      - name: Install StreamX Mesh with reference flow for Tenants 1 and 2
        run: |
          helm -n tenant-1 upgrade tenant-1 ./chart \
            --set "imagePullSecrets[0].name=streamx-gar-json-key" \
            --set rest_ingestion.ingress.host=tenant-1-api.127.0.0.1.nip.io \
            --set delivery.reference-web.outputs.http.ingress.host=tenant-1.127.0.0.1.nip.io \
            -f examples/reference/messaging.yaml \
            -f examples/reference/ingestion.yaml \
            -f examples/reference/processing.yaml \
            -f examples/reference/delivery.yaml
          helm -n tenant-2 upgrade tenant-2 ./chart \
            --set "imagePullSecrets[0].name=streamx-gar-json-key" \
            --set rest_ingestion.ingress.host=tenant-2-api.127.0.0.1.nip.io \
            --set delivery.reference-web.outputs.http.ingress.host=tenant-2.127.0.0.1.nip.io \
            -f examples/reference/messaging.yaml \
            -f examples/reference/ingestion.yaml \
            -f examples/reference/processing.yaml \
            -f examples/reference/delivery.yaml

      - name: Wait for StreamX Mesh deployments complete for Tenants 1 and 2
        run: |
          kubectl -n tenant-1 rollout status deployment -l app.kubernetes.io/instance=tenant-1
          kubectl -n tenant-2 rollout status deployment -l app.kubernetes.io/instance=tenant-2

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_STREAMX_RELEASES_GAR_READ_KEY }}

      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: 'maven'

      - name: Verify multi-tenancy deployment
        run: |
          cd examples/reference/e2e
          export STREAMX_INGESTION_REST_AUTH_TOKEN=$(kubectl -n tenant-1 run jwt-token-provider --rm --restart=Never -it -q --image=curlimages/curl -- curl -X 'POST' 'http://tenant-1-streamx-rest-ingestion/auth/token?upn=test')
          ./mvnw clean verify -Pmulti-tenancy
