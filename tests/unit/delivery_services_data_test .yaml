# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json

suite: test delivery services data
set:
  delivery:
    service1:
      replicas: 1

tests:
  # @Test
  - it: repoistory and metadata volumes are always created as emptyDir (bound to pod's lifecycle)
    template: templates/delivery/delivery-deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.volumes[0].name
          value: repository
      - equal:
          path: spec.template.spec.volumes[0].emptyDir
          value: {}
      - equal:
          path: spec.template.spec.volumes[1].name
          value: metadata
      - equal:
          path: spec.template.spec.volumes[1].emptyDir
          value: {}
  # @Test
  - it: when delivery service container configures repository mount path then repoistory volume is mounted and env configured
    template: templates/delivery/delivery-deployment.yaml
    set:
      delivery:
        service1:
          containers:
            - name: container
              image:
                repository: test/repository
              data:
                repositoryMountPath: /repository/path
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content: {name: REPOSITORY_RESOURCE_ROOT_DIRECTORY, value: /repository/path}
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].name
          value: repository
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].mountPath
          value: /repository/path
  # @Test
  - it: when delivery service container configures metadata mount path then repoistory volume is mounted and env configured
    template: templates/delivery/delivery-deployment.yaml
    set:
      delivery:
        service1:
          containers:
            - name: container
              image:
                repository: test/repository
              data:
                metadataMountPath: /metadata/path
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content: {name: REPOSITORY_METADATA_ROOT_DIRECTORY, value: /metadata/path}
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].name
          value: metadata
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].mountPath
          value: /metadata/path
